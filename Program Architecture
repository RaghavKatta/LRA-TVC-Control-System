# Defining the system we're working with:  
 1. Non-Linear [linearized system, adjust via inertia stuff]
 2. Minimum Delay 
 3. Closed Loop System
 4. Requirements: Reduce Windup Error, Cascading PID Control, Variant Subsystem Heirarchy [to model in simulink]
 5. Define cases

#

# PID Values Calculation:
  P --> 
  I --> 
  D -->
[will figure out via the advanced tuning method and/or simulink]

#

# Pre-Launch Requirements
  [Confirm the following throught the User Interface]
  1. Check Communication with Flight Computer
  2. Check that there is power to all components
  3. Sensors are functioning 
  4. Launch Commands cued

#

# Powered Flight
  1. Sensor Feedback: altitude, velocity, acceleration 
  2. PID Tuning to account for disturbances affecting flight trajectory

Altitude --> Take the measurements from BMP 388 
Arduino Library --> https://github.com/adafruit/Adafruit_BMP3XX

Acceleration --> Get values from IMU [ MPU 6050 & GY 521 ] 
Inspiration Tutorial --> https://randomnerdtutorials.com/arduino-mpu-6050-accelerometer-gyroscope/#:~:text=The%20MPU%2D6050%20measures%20acceleration,and%20pitch%20angles%20using%20trigonometry.
Understanding how the accelerometer works --> https://www.instructables.com/Accelerometer-Gyro-Tutorial/ 

Velocity --> Take the integral of acceleration at timesteps of 10 ms, to approximate velocity using Reimann Sums.  
v += a*.01

Roll, Pitch, Yaw --> The gyroscope in the IMU measures angular velocity across these three axis.
Inspiration Video --> https://www.youtube.com/watch?v=ythjrfQViRQ
Understanding how the gyroscope works --> https://www.instructables.com/Accelerometer-Gyro-Tutorial/ 

Nose cone angle - Integrate pitch and yaw values to get nose cone angle. We can split this across X and Y axis so we can process them separately for tuning.
find the overall theta 
Inspiration Video --> https://www.youtube.com/watch?v=ythjrfQViRQ  
Nose_cone_angle_X += angular_velocity_x* .01 (same with y after)

Gimbal angle  - This would be what we send to the actuators that control the inner and outer rings of the gimbal. Each ring controls a specific axis along
which we change the angle of the nozzle. The fraction of one rotation of the servo controls the position of the actuator, and as a result the gimbal's degree
of rotation. 
[The angle the Gimbal should point in comes from PID tuning]

Inertia - as a function of time, gotta figure this out before hand 
Must calculate before hand(looking at burn rate for engine, find burn rate for our engine)

*********
//gets an input of time, depending on what that value is, calculates the percent of fuel
//taken up and then multiplies that by the inertia difference and adds to the final 
//this allows it to model the curve between the starting and ending inertia appropriately
double Inertia(time) {
   //time in ms
   // check my math on this, I put the base equations in the notes
   //Inertia_difference is the difference between initial and final inertia
   //fuel fraction is the integral of the fuel used up, but it's not divided yet
   //we have to do that at the end which is why it is divided by 961.8 at end
   t = time/1000;
   fuel_fraction = 0;
   if t< .125 {
       fuel_fraction =  166 * pow(t,2)-1300*(pow(t,3)/3+pow(t,2)/8+t/64; 
   }
   else if t < 2.125 {
       fuel_fraction = 1015/4 * t - 15 * pow(t,2) + 3.8567708333;
   }
   else if t < 3.5 {
       fuel_fraction = 51.271-t⋅(36t−1673)/8;
   }
   else if t < 5.4 {
       fuel_fraction = -322.26 + 2113*t/5−35*pow(t,2);
   }
   else if t < 6.4 {
       fuel_fraction = 56.813 + 223*t/5−44(pow(t,2)/2−27*t/5);
   }
   else {
       fuel_fraction = 961.8
   }

   return Inertia_difference * fuel_fraction/961.8  + Final_inertia;
}


*********
]
#

# Parachute Flight
  1. Determining Statement that deploys parachute

*****************************************************
boolean checkParachute(altitude, velocity, acceleration) {
     boolean condition = false;
     if(velocity <= 0 && acceleration <= 20) {
         condition = true;
     }
     else if(altitude < prevaltitude && acceleration <= 20){
         condition = true;
     }
     return condition;
}
*****************************************************

  2. Sensors used to determine it's descent path + potential landing point {Sensors will just tell us where to expect it for recovery (not to plan descent path)
  Because we will plan approx. descent path beforehand}
[I don't think we use sensors to make a decent path back, i think it's just releasing the parachute on the massive field
the determining condition is prob(if rocket altitude goes down for half a second + the acceleration is less than 20 m/s to make sure
it doesn't prematurely fire while the rocket is going
*maybe check every half second
*we can have 2 checkpoints in case something malfunctions
if velocity <= 0 and acceleration <= 20:
  deploy parchute
else if altitude < (altitude 1 second ago) and acceleration <=20:
  deply parachute
]
{I think it should be based off of our altitude and we calculate acceleration and velocity that the rocket should have at that altitude}
# 




#
[actual code sections:
1.we need code to do all the variable calculations, make them save as global variables
     Listed above 

2.Reaction Wheel PI control
     //error is the roll value from gyroscope
     {error should be the change in the angle abt the x and y axis with respect to z from the gyro (alternating x and y values should indicate this) --> depending
      on how fast these values are changing we can determine rev/sec and output the counter to that}
     double pid(double error)
     {
       double proportional = error;
       integral += error * dt;
       double output = (kp * proportional) + (ki * integral);
       if output > critical value:
          output = critical value;
          integral -= error * dt;
       //this is just to prevent windup. We get it to stop integrating so the value doesn't increase further past a critical point
       //can prob make this more efficient but still is kinda the starting point 
       return output;
     }

*****************************************************
double pid(roll)
{
    proportional = roll;
    if (output < critical value) 
    {
        integral += roll * dt;
    }
    output = (kp * proportional) + (ki * integral);
}
*****************************************************

3.Gimbal Pi control that ignores the change in inertia
      same thing as reaction wheel basically, except error = angle in the direction we care about(x/y)

*****************************************************
//make the same thing with y
double pid(θ_x)
{
    proportional_gimbal_x = θ_x;
    if (output_gimbal_x < critical_value_gimbal) 
    {
        integral_gimbal_x += θ_x * dt;
    }
    output_x = (kp_gimbal * proportional_gimbal_x) + (ki_gimbal * integral_gimbal_x);
}
*****************************************************

4.The conversion of that into the proper value accounting for inertia(equations on the ppt for dcr)
   double conversion(θpid)
   {
      τpid = rFsin(θpid); {Force here is thrust at a given point)    
      αdesired = τpid/Ipid;
      αdesired * I(t) = τdesired; {This torque needs to be inverted to get the angle we need to coutneract the torque that has already rotated the rocket}
      τfinal = τdesired - τgravity; {Shouldn't you add torque gravity cause gravity is technically contributing to the downards pull so we need to counter it too}
      θfinal = sin^-1(τfinal/rF); {arcsin or 1/sin?}
      return θfinal;
    }


*****************************************************
double conversion(θpid) 
{
    //have all the variables be defined globally at the start
    τpid = r*F*sin(θpid); 
    αdesired = τpid/Ipid;
    αdesired * I(t) = τdesired; 
    τfinal = τdesired - τgravity; 
    θfinal = arcsin(τfinal/rF); 
    return θfinal;
}
*****************************************************


5.Converting that gimbal pi control output into values for the actuators/rotation wheel thingies or whatever 
    if it's a rotation wheel thingy, we can basically directly feed in the angle and it should rotate

    
6.checking for parachute condition values 
    code is above
I think that's it but I probably missed smth
]
#

