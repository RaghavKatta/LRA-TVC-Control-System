// Insert Code for different devices on here

// BMP 388
#include <Wire.h>
#include <Adafruit_Sensor.h>
#include "Adafruit_BMP3XX.h"

#define SEALEVELPRESSURE_HPA (1013.25) // Set to 

Adafruit_BMP3XX bmp;

void setup() {

   double pastAlt = 0;
   int timeElp = 0;

   serial.begin(//speed);
   while (!Serial);

   if (!bmp.begin_I2C) {
      Serial.println("Could not find a valid BMP388 sensor, check wiring.");
	   while (1);
   }

   //set up functions for elimination of noise (can be adjusted)
   bmp.setTemperatureOversampling(BMP3_OVERSAMPLING_8X);
   bmp.setPressureOversampling(BMP3_OVERSAMPLING_4X);
   bmp.setIIRFilterCoeff(BMP3_IIR_FILTER_COEFF_1);
   //set max frequency of readings
   bmp.setOutputDataRate(BMP3_ODR_100_HZ);
}

void loop() {

if (!bmp.performReading()) {
    Serial.println("Failed to perform reading");
    return;
  }

Serial.print("Temperature = ");
  Serial.print(bmp.temperature);
  Serial.println(" *C");

  Serial.print("Pressure = ");
  Serial.print(bmp.pressure / 100.0);
  Serial.println(" hPa");

  Serial.print("Approx. Altitude = ");
  Serial.print(bmp.readAltitude(SEALEVELPRESSURE_HPA));
  Serial.println(" m");

  Serial.println();
  delay(1000);

alt = bmp.readAltitude(SEALEVELPRESSURE_HPA);

switch (state) {
   case 1: //ready to launch
      break;
   case 2: //powered flight
      break;
   case 3: //unpowered flight
      if (alt < pastAlt) {
      case = 4;
      }
      pastAlt = alt;
      delay(1000);
      break;
   case 4: //descent (no chutes)
      if (alt < chuteAlt) {
      //fire chutes
      case = 5;
      }
      break;
   case 5: //chutes
      if (alt < 5m) {
         timeElp += 1;
         if (timeElp >= 5) {
            //on ground
         }
      } else {
         timeElp = 0;
      }
      break;
   }      

}


// SD Card
   ~ in progress
   https://cdn-learn.adafruit.com/downloads/pdf/adafruit-micro-sd-breakout-board-card-tutorial.pdf -> might work because it's for the breakout board that we have
   or maybe this https://forum.pjrc.com/threads/70142-External-SD-card-on-Teensy-4-1

// MPU 6050/GY-521 IMU
   ~ in progress
Basically we need to zero the gyro and then we need it to measure the angular velocity in the xy plane respect to it's zero. 
WE also need to zero the accelerometer before we begin + intitializer the imu. 
https://www.youtube.com/watch?v=oqmbVeRlLgg --> This video explains the code. 

#include "I2Cdev.h"
#include "MPU6050_6Axis_MotionApps20.h"
#if I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE
    #include "Wire.h"
#endif
MPU6050 mpu;
#define OUTPUT_READABLE_YAWPITCHROLL
#define OUTPUT_READABLE_WORLDACCEL
#define OUTPUT_TEAPOT

#define INTERRUPT_PIN 2
#define LED_PIN 11
bool blinkState = false;
/ MPU control/status vars
bool dmpReady = false;  // set true if DMP init was successful
uint8_t mpuIntStatus;   // holds actual interrupt status byte from MPU
uint8_t devStatus;      // return status after each device operation (0 = success, !0 = error)
uint16_t packetSize;    // expected DMP packet size (default is 42 bytes)
uint16_t fifoCount;     // count of all bytes currently in FIFO
uint8_t fifoBuffer[64]; // FIFO storage buffer

// orientation/motion vars
Quaternion q;           // [w, x, y, z]         quaternion container
VectorInt16 aa;         // [x, y, z]            accel sensor measurements
VectorInt16 aaReal;     // [x, y, z]            gravity-free accel sensor measurements
VectorInt16 aaWorld;    // [x, y, z]            world-frame accel sensor measurements
VectorFloat gravity;    // [x, y, z]            gravity vector
float euler[3];         // [psi, theta, phi]    Euler angle container
float ypr[3];           // [yaw, pitch, roll]   yaw/pitch/roll container and gravity vector

// packet structure for InvenSense teapot demo
uint8_t teapotPacket[14] = { '$', 0x02, 0,0, 0,0, 0,0, 0,0, 0x00, 0x00, '\r', '\n' };

// ================================================================
// ===               INTERRUPT DETECTION ROUTINE                ===
// ================================================================

volatile bool mpuInterrupt = false;     // indicates whether MPU interrupt pin has gone high
void dmpDataReady() {
    mpuInterrupt = true;
}

// ================================================================
// ===                      INITIAL SETUP                       ===
// ================================================================

void setup() {
    // join I2C bus (I2Cdev library doesn't do this automatically)
    #if I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE
        Wire.begin();
        Wire.setClock(400000); // 400kHz I2C clock. Comment this line if having compilation difficulties
    #elif I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE
        Fastwire::setup(400, true);
    #endif

    // initialize serial communication
    // (115200 chosen because it is required for Teapot Demo output, but it's
    // really up to you depending on your project)
    Serial.begin(38400);
    while (!Serial); // wait for Leonardo enumeration, others continue immediately

    // NOTE: 8MHz or slower host processors, like the Teensy @ 3.3V or Arduino
    // Pro Mini running at 3.3V, cannot handle this baud rate reliably due to
    // the baud timing being too misaligned with processor ticks. You must use
    // 38400 or slower in these cases, or use some kind of external separate
    // crystal solution for the UART timer.

    // initialize device
    Serial.println(F("Initializing I2C devices..."));
    mpu.initialize();
    pinMode(INTERRUPT_PIN, INPUT);

    // verify connection
    Serial.println(F("Testing device connections..."));
    Serial.println(mpu.testConnection() ? F("MPU6050 connection successful") : F("MPU6050 connection failed"));

    // wait for ready
    Serial.println(F("\nSend any character to begin DMP programming and demo: "));
    while (Serial.available() && Serial.read()); // empty buffer
    while (!Serial.available());                 // wait for data
    while (Serial.available() && Serial.read()); // empty buffer again

    // load and configure the DMP
    Serial.println(F("Initializing DMP..."));
    devStatus = mpu.dmpInitialize();

    // supply your own gyro offsets here, scaled for min sensitivity
    mpu.setXGyroOffset(220);
    mpu.setYGyroOffset(76);
    mpu.setZGyroOffset(-85);
    mpu.setZAccelOffset(1788); // 1688 factory default for my test chip

    // make sure it worked (returns 0 if so)
    if (devStatus == 0) {
        // Calibration Time: generate offsets and calibrate our MPU6050
        mpu.CalibrateAccel(6);
        mpu.CalibrateGyro(6);
        mpu.PrintActiveOffsets();
        // turn on the DMP, now that it's ready
        Serial.println(F("Enabling DMP..."));
        mpu.setDMPEnabled(true);

        // enable Arduino interrupt detection
        Serial.print(F("Enabling interrupt detection (Arduino external interrupt "));
        Serial.print(digitalPinToInterrupt(INTERRUPT_PIN));
        Serial.println(F(")..."));
        attachInterrupt(digitalPinToInterrupt(INTERRUPT_PIN), dmpDataReady, RISING);
        mpuIntStatus = mpu.getIntStatus();

        // set our DMP Ready flag so the main loop() function knows it's okay to use it
        Serial.println(F("DMP ready! Waiting for first interrupt..."));
        dmpReady = true;

        // get expected DMP packet size for later comparison
        packetSize = mpu.dmpGetFIFOPacketSize();
    } else {
        // ERROR!
        // 1 = initial memory load failed
        // 2 = DMP configuration updates failed
        // (if it's going to break, usually the code will be 1)
        Serial.print(F("DMP Initialization failed (code "));
        Serial.print(devStatus);
        Serial.println(F(")"));
    }

    // configure LED for output
    pinMode(LED_PIN, OUTPUT);
}



// ================================================================
// ===                    MAIN PROGRAM LOOP                     ===
// ================================================================

void loop() {
    // if programming failed, don't try to do anything
    if (!dmpReady) return;
    // read a packet from FIFO
    if (mpu.dmpGetCurrentFIFOPacket(fifoBuffer)) { // Get the Latest packet 
        #ifdef OUTPUT_READABLE_QUATERNION
            // display quaternion values in easy matrix form: w x y z
            mpu.dmpGetQuaternion(&q, fifoBuffer);
            Serial.print("quat\t");
            Serial.print(q.w);
            Serial.print("\t");
            Serial.print(q.x);
            Serial.print("\t");
            Serial.print(q.y);
            Serial.print("\t");
            Serial.println(q.z);
        #endif

        #ifdef OUTPUT_READABLE_EULER
            // display Euler angles in degrees
            mpu.dmpGetQuaternion(&q, fifoBuffer);
            mpu.dmpGetEuler(euler, &q);
            Serial.print("euler\t");
            Serial.print(euler[0] * 180/M_PI);
            Serial.print("\t");
            Serial.print(euler[1] * 180/M_PI);
            Serial.print("\t");
            Serial.println(euler[2] * 180/M_PI);
        #endif

        #ifdef OUTPUT_READABLE_YAWPITCHROLL
            // display Euler angles in degrees
            mpu.dmpGetQuaternion(&q, fifoBuffer);
            mpu.dmpGetGravity(&gravity, &q);
            mpu.dmpGetYawPitchRoll(ypr, &q, &gravity);
            Serial.print("ypr\t");
            Serial.print(ypr[0] * 180/M_PI);
            Serial.print("\t");
            Serial.print(ypr[1] * 180/M_PI);
            Serial.print("\t");
            Serial.println(ypr[2] * 180/M_PI);
        #endif

        #ifdef OUTPUT_READABLE_REALACCEL
            // display real acceleration, adjusted to remove gravity
            mpu.dmpGetQuaternion(&q, fifoBuffer);
            mpu.dmpGetAccel(&aa, fifoBuffer);
            mpu.dmpGetGravity(&gravity, &q);
            mpu.dmpGetLinearAccel(&aaReal, &aa, &gravity);
            Serial.print("areal\t");
            Serial.print(aaReal.x);
            Serial.print("\t");
            Serial.print(aaReal.y);
            Serial.print("\t");
            Serial.println(aaReal.z);
        #endif

        #ifdef OUTPUT_READABLE_WORLDACCEL
            // display initial world-frame acceleration, adjusted to remove gravity
            // and rotated based on known orientation from quaternion
            mpu.dmpGetQuaternion(&q, fifoBuffer);
            mpu.dmpGetAccel(&aa, fifoBuffer);
            mpu.dmpGetGravity(&gravity, &q);
            mpu.dmpGetLinearAccel(&aaReal, &aa, &gravity);
            mpu.dmpGetLinearAccelInWorld(&aaWorld, &aaReal, &q);
            Serial.print("aworld\t");
            Serial.print(aaWorld.x);
            Serial.print("\t");
            Serial.print(aaWorld.y);
            Serial.print("\t");
            Serial.println(aaWorld.z);
        #endif
    
        #ifdef OUTPUT_TEAPOT
            // display quaternion values in InvenSense Teapot demo format:
            teapotPacket[2] = fifoBuffer[0];
            teapotPacket[3] = fifoBuffer[1];
            teapotPacket[4] = fifoBuffer[4];
            teapotPacket[5] = fifoBuffer[5];
            teapotPacket[6] = fifoBuffer[8];
            teapotPacket[7] = fifoBuffer[9];
            teapotPacket[8] = fifoBuffer[12];
            teapotPacket[9] = fifoBuffer[13];
            Serial.write(teapotPacket, 14);
            teapotPacket[11]++; // packetCount, loops at 0xFF on purpose
        #endif

        // blink LED to indicate activity
        blinkState = !blinkState;
        digitalWrite(LED_PIN, blinkState);
    }
}




// MOSFET 
   ~from what I read, we don't need extra code for flash memory, we just need to include the library so we can 
    use the read/write features. It'll just sorta play a role in when we right down the code for everything else. 


// PID Calc
needs physical values to fully run

// Inertia 
done/needs checking
//gets an input of time, depending on what that value is, calculates the percent of fuel
//taken up and then multiplies that by the inertia difference and adds to the final 
//this allows it to model the curve between the starting and ending inertia appropriately
double Inertia(time) {
   //time in ms
   // check my math on this, I put the base equations in the notes
   //Inertia_difference is the difference between initial and final inertia
   //fuel fraction is the integral of the fuel used up, but it's not divided yet
   //we have to do that at the end which is why it is divided by 961.8 at end
   t = time/1000;
   fuel_fraction = 0;
   if t< .125 {
       fuel_fraction =  166 * pow(t,2)-1300*(pow(t,3)/3+pow(t,2)/8+t/64; 
   }
   else if t < 2.125 {
       fuel_fraction = 1015/4 * t - 15 * pow(t,2) + 3.8567708333;
   }
   else if t < 3.5 {
       fuel_fraction = 51.271-t⋅(36t−1673)/8;
   }
   else if t < 5.4 {
       fuel_fraction = -322.26 + 2113*t/5−35*pow(t,2);
   }
   else if t < 6.4 {
       fuel_fraction = 56.813 + 223*t/5−44(pow(t,2)/2−27*t/5);
   }
   else {
       fuel_fraction = 961.8
   }

   return Inertia_difference * fuel_fraction/961.8  + Initial_inertia;
}
//Also need to correct for the change in thrust
double thrust(time){	
	//time from ms to s
	t = time/1000
	thrust = 0
	if t < .125{
		thurst = -1300(t+.125)^2+330+2x
	}
	else if t < 2.125{ 
	        thrust = 250 - 30(x-.125)
	}
	else if t < 3.5{ 
		thrust = 290-9(x-2.125)
	}
	else if t < 5.4{ 
		thrust = 177.6-70(x-3.5)
	}
	else if t < 6.4{ 
		thrust = 44.6-44(x-5.4)
	}
	else{ 
		thrust = 0
	}
return thrust
}
// Servos 

//initialize servo objects
Servo servo_innerloop;
Servo servo_outerloop;

void setup() {
   servo_innerloop.attach(pin # the servo is attached to)
   servo_innerloop.write(angle that makes the computer horiontal) 
   servo_outerloop.attach(pin # the servo is attached to)
   servo_outerloop.write(angle that makes the computer horiontal) 
   //ideally we'd want the servo's attached such that this angle is near the middle of the range
}

void loop() {
   innerloop_val = PID(noseangle_x);
   //we have to add the initial value, because the PID is tuned in such
   //a way that the initial angle is 0 and it'll go + or - to switch directions
   servo_innerloop.write(innerloop_val+initial value);
   
   outerloop_val = PID(noseangle_x);
   servo_outerloop.write(outerloop_val+initial value);
}

// Reaction Wheel
double pid(roll)
{
    proportional = roll;
    if (output < critical value) 
    {
        integral += roll * dt;
    }
    output = (kp * proportional) + (ki * integral);
}

//Pid output conversion
double conversion(θpid) 
{
    //have all the variables be defined globally at the start
    τpid = r*F*sin(θpid); 
    αdesired = τpid/Ipid;
    αdesired * I(t) = τdesired; 
    τfinal = τdesired - τgravity; 
    θfinal = arcsin(τfinal/rF); 
    return θfinal;
}

double conversion(θpid_x) 
{
    //have all the variables be defined globally at the start
    
    τpid = r*Fpid*sin(θpid)*cos(y); 
    αdesired = τpid/Ipid;
    αdesired * I(t) = τdesired; 
    τfinal = τdesired - τgravity; 
    θfinal = arcsin(τfinal/r*thrust(t)*cos(y)); 
    return θfinal;
}
//
//Parachute Checking Conditions
boolean checkParachute(altitude, velocity, acceleration) {
     boolean condition = false;
     if(velocity <= 0 && acceleration <= 20) {
         condition = true;
     }
     else if(altitude < prevaltitude && acceleration <= 20){
         condition = true;
     }
     return condition;
}

//Gimbal Pi control that ignores the change in inertia
      same thing as reaction wheel basically, except error = angle in the direction we care about(x/y)

//make the same thing with y(instead of x, and y, it'd basically be our pitch and yaw, BUT we have to make sure that it's aligned with our sensors)
double pid(θ_x)
{
    proportional_gimbal_x = θ_x;
    if (output_gimbal_x < critical_value_gimbal) 
    {
        integral_gimbal_x += θ_x * dt;
    }
    output_x = (kp_gimbal * proportional_gimbal_x) + (ki_gimbal * integral_gimbal_x);
}

// Add as you think of it
